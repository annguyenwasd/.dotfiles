# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
extends javascript
snippet mobx "Create simple mobx store"
import { Instance, SnapshotIn, SnapshotOut, types } from 'mobx-state-tree';

export const $1 = types
  .model('$1', {
		$2
	})
  .actions((self) => {
    return {
		$3
		};
  })
  .views((self) => {
    return {
		$4
		};
  });

export interface $1Instance extends Instance<typeof $1> {}
export interface $1SnapshotIn extends SnapshotIn<typeof $1> {}
export interface $1SnapshotOut extends SnapshotOut<typeof $1> {}
endsnippet

snippet mobxenum "Create mobx enum declaration" b
types.enumeration<$1>('$1', Object.values($1))
endsnippet

snippet mobxnamed "Create simple mobx store using existing mobx model"
import { Instance, SnapshotIn, SnapshotOut, types } from 'mobx-state-tree';
import { $2 } from '$4';

export const $1 = $2.named('$1')
	.props({})
  .actions((self) => {
    return {};
  })
  .views((self) => {
    return {};
  });

export interface $1Instance extends Instance<typeof $1> {}
export interface $1SnapshotIn extends SnapshotIn<typeof $1> {}
export interface $1SnapshotOut extends SnapshotOut<typeof $1> {}
endsnippet

