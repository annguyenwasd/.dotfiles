# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
extends javascript

snippet reactnew "New react component with imports" b
import * as React from 'react';
import styled from 'styled-components';

interface $1Props extends React.HTMLAttributes<HTMLDivElement> {}

export const $1 = (props: $1Props) => {
  return (
    <div>
      <h1>Hello World</h1>
    </div>
  );
};

endsnippet

snippet rfc "New react component" b
interface $1Props extends React.HTMLAttributes<HTMLDivElement> {}

export const $1 = (props: $1Props) => {
  return (
    <div>
      <h1>Hello World</h1>
    </div>
  );
};

endsnippet


snippet csf "New story book using CSF syntax" b
import * as React from 'react';
import { $1 } from './$1';

export default {
  title: 'ui/$1',
  component: $1,
};

export const Base = () => {
  return <$1 />;
};
endsnippet

snippet reactnewmobx "Create component with mobx observer & use local store hooks" b
import { useStore } from '@doltech/core';
import { observer } from 'mobx-react-lite';
import * as React from 'react';
import styled from 'styled-components';

interface Observed$1Props extends React.HTMLAttributes<HTMLDivElement> {}

const Observed$1Base = (props: $Observed$1Props) => {
  const { $2 } = useStore();

  return (
    <div>
      <h1>Hello World</h1>
    </div>
  );
};

export const Observed$1 = observer(Observed$1Base);
endsnippet
