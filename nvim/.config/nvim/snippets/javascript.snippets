snippet jpre "Print JSON inside pre tag"
  <pre>
    {JSON.stringify($1, null, 2)}
  </pre>


snippet esd "eslint disable"
  /* eslint-disable */


snippet reactnew "New react component" b
  import * as React from 'react';
  import styled from 'styled-components';
  import PropTypes from 'prop-types';

  export const $1 = (props) => {
    const {} = props;

    return (
      <div>
        <h1>Hello World</h1>
      </div>
    );
  };

  $1.propTypes = {};


snippet reactnewf "New react function component" b
  import * as React from 'react';
  import styled from 'styled-components';
  import PropTypes from 'prop-types';

  function $1Base(props) {
    const {} = props;
    return (
      <div>
        <h1>Hello World</h1>
      </div>
    );
  };

  $1.propTypes = {};

  export const $1 = $1Base;



snippet connect "Connect with redux" b
  const mapStateToProps = state => ({
    $3
  });

  const mapDispatchToProps = dispatch => bindActionCreators($1, dispatch);

  export default connect(mapStateToProps, mapDispatchToProps)(React.memo($2));

  import { bindActionCreators } from 'redux';
  import { connect } from 'react-redux';


snippet css "styled component css" b
  ${p => p.$1 &&  css\`
    $2
  \`};


snippet grid "css grid" b
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  gap: 0px 0px;


snippet media "css media" b
  @media screen and (min-width: 768px) {
    $1
  }


snippet storyOf "Old style storyof" b
  import React from 'react';
  import {storiesOf} from '@storybook/react';
  import { $2 }  from './$2';
  import { action } from '@storybook/addon-actions';

  storiesOf('$1', module)
  .add('$2', () => (<$2 />));


snippet theme "styled component theme" b
  ${p => p.theme.$1};


snippet LJ "console.log with JSON.stringify"
  console.log("[ANNGUYENWASD]", JSON.stringify($1, null, 2));


snippet lg "console.log with prefix string"
  console.log("[ANNGUYENWASD]",\`$1\`, $1);


snippet ll "console.log "
  console.log("[ANNGUYENWASD]",$1);


snippet lx "console.log and xxxxx "
  console.log("[ANNGUYENWASD]",'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx');


snippet usef "use effect" b
  React.useEffect(() => {
    $1
  }, []);


snippet usem "use memo" b
  const $1 = React.useMemo(() => {
    $2
  }, []);


snippet usec "use callback" b
  const $1 = React.useCallback(() => {
    $2
  }, []);


snippet uses "use state" b
  const [$1, $2] = React.useState($3);


snippet user "use ref" b
  const $1 = React.useRef(null);


snippet /td "Create a todo"
  // TODO: $1


snippet testnew "New React test template" b
  /// <reference types="@testing-library/jest-dom" />
  import '@testing-library/jest-dom/extend-expect';
  import { fireEvent, render, cleanup } from '@testing-library/react';
  import * as React from 'react';

  import { $1 } from './$1';

  describe('$2', () => {
    it('should $3', () => {
      const { baseElement } = render(<$1 />);
      expect(baseElement).toBeInTheDocument();
    });
  });


snippet it "New Jest it block" b
  it('should $1', () => {
    $2
  });


snippet desc "New Jest describe block" b
  describe('$1', () => {
    it('should $2', () => {
      $3
    });
  });


snippet hideScrollbars "Hide scrollbars" b
  /* Hide scrollbar for Chrome, Safari and Opera */
  &::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
    -ms-overflow-style: none;  /* IE and Edge */
    scrollbar-width: none;  /* Firefox */


snippet sdiv "styled div" b
  const $1 = styled.div\`
    $2
  \`;
